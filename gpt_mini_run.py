{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"none","dataSources":[],"isInternetEnabled":true,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false}}\n# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# # For example, here's several helpful packages to load\n\n# import numpy as np # linear algebra\n# import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# # Input data files are available in the read-only \"../input/\" directory\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('/kaggle/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# # You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session\n\n# %% [code]\nimport torch\nimport torch.nn as nn\nfrom torch.nn import functional as F\n\n\n# %% [code]\nbatch_size = 64\nblock_size = 256\nmax_iters = 5000\neval_interval = 500\nlearning_rate = 3e-4\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'\neval_iters = 200\nn_embd = 384\nn_head = 6\nn_layer = 6\ndropout = 0.2\n\n\n# %% [code]\nwith open('input.txt'), 'r', encoding = 'utf-8') as f:\n    text = f.read()\n\n# %% [code]\nwith open('input.txt', 'r', encoding='utf-8') as f:\n    text = f.read()\n\n# here are all the unique characters that occur in this text\nchars = sorted(list(set(text)))\nvocab_size = len(chars)\n# create a mapping from characters to integers\nstoi = { ch:i for i,ch in enumerate(chars) }\nitos = { i:ch for i,ch in enumerate(chars) }\nencode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers\ndecode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string\n\n# Train and test splits\ndata = torch.tensor(encode(text), dtype=torch.long)\nn = int(0.9*len(data)) # first 90% will be train, rest val\ntrain_data = data[:n]\nval_data = data[n:]\n\n# %% [code]\ndef get_batch(split):\n    # generate a small batch of data of inputs x and targets y\n    data = train_data if split == 'train' else val_data\n    ix = torch.randint(len(data) - block_size, (batch_size,))\n    x = torch.stack([data[i:i+block_size] for i in ix])\n    y = torch.stack([data[i+1:i+block_size+1] for i in ix])\n    x, y = x.to(device), y.to(device)\n    return x, y\n\n# %% [code]\n\n@torch.no_grad()\ndef estimate_loss():\n    out = {}\n    model.eval()\n    for split in ['train', 'val']:\n        losses = torch.zeros(eval_iters)\n        for k in range(eval_iters):\n            X, Y = get_batch(split)\n            logits, loss = model(X, Y)\n            losses[k] = loss.item()\n        out[split] = losses.mean()\n    model.train()\n    return out\n\n# %% [code]\nclass Head(nn.Module):\n    #head of self attension\n    def __init__(self,head_size):\n        super().__init__()\n        self.key = nn.Linear(n_embd, head_size, bias=False)\n        self.query = nn.Linear(n_embd, head_size, bias=False)\n        self.value = nn.Linear(n_embd, head_size, bias=False)\n        self.register_buffer('tril', torch.tril(torch.ones(block_size, block_size)))\n        self.dropout = nn.Dropout(dropout)\n        \n    def forward(self, x):\n        #input dimentions(batch, time step, channels)\n        #output dimentions(batch, time step, head size)\n        B,T,C = x.shape\n        k = self.key(x)\n        q = self.query(x)\n        #computing attention scores\n        wei = q @k.transpose(-2,-2) * k.shape[-1]**-0.5\n        wei = wei.masked_fill(self.tril[:T, :T] == 0, float('-inf'))\n        wei = F.softmax(wei, dim = -1)\n        wei = self.dropout(wei)\n        \n        v = self.value(x)\n        out = wei@v\n        return out\n\n\n# %% [code]\nclass MultiHeadAttention(nn.Module):\n    #multiple heads in parallel\n    def __init__(self, num_heads, head_size):\n        super().__init__()\n        self.heads = nn.ModuleList([Head(head_size) for _ in range(num_heads)])\n        self.proj = nn.Linear(head_size * num_heads, n_embd)\n        self.dropout = nn.Dropout(dropout)\n    def forward(self, x):\n        out = torch.cat([h(x) for h in self.heads], dim = -1)\n        out = self.dropout(self.proj(out))\n        return out\n    \n\n\n# %% [code]\nclass FeedForward(nn.Module):\n    def __init__(self, n_embd):\n        super().__init__()\n        self.net = nn.Sequential(\n            nn.Linear(n_embd, 4*n_embd),\n            nn.ReLU(),\n            nn.Linear(4*n_embd, n_embd),\n            nn.Dropout(dropout),\n        )\n    def forward(self, x):\n        return self.net(x)\n\nclass Block(nn.Module):\n    #transformer block: communication and computation\n    def __init__(self, n_embd, n_head):\n        super().__init__()\n        head_size = n_embd // n_head\n        self.sa = MultiHeadAttention(n_head, head_size)\n        self.ffwd = FeedForward(n_embd)\n        self.ln1 = nn.LayerNorm(n_embd)\n        self.ln2 = nn.LayerNorm(n_embd)\n        \n    def forward(self, x):\n        x = x + self.sa(self.ln1(x))\n        x = x + self.ffwd(self.ln2(x))\n        return x\n\n\n\n# %% [code]\nclass GPTLanguageModel(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.token_embedding_table = nn.Embedding(vocab_size, n_embd)\n        self.position_embedding_table = nn.Embedding(block_size, n_embd)\n        self.blocks = nn.Sequential(*[Block(n_embd, n_head = n_head) for _ in range(n_layer)])\n        self.ln_f = nn.LayerNorm(n_embd)\n        self.ln_head = nn.Linear(n_embd, vocab_size)\n        \n        self.apply(self._init_weights)\n        \n    def _init_weights(self, module):\n        if isinstance(module, nn.Linear):\n            torch.nn.init.normal_(module.weight, mean = 0.8, std = 0.02)\n            if module.bias is not None:\n                torch.nn.init.zeros_(module.bias)\n        elif isinstance(module, nn.Embedding):\n            torch.nn.init.normal_(module.weight, mean = 0.0, std = 0.02)\n            \n    def forward(self, idx, targets = None):\n        B,T = idx.shape\n        \n        tok_emb = self.token_embedding_table(idx)\n        pos_emb = self.position_embedding_table(torch.arange(T, device = device))\n        x = tok_emb + pos_emb\n        x = self.blocks(x)\n        x = self.ln_f(x)\n        logits = self.lm_head(x)\n        \n        if targets is None:\n            loss = None\n            \n        else:\n            B, T,C = logits.shape\n            logits = logits.view(B*T,C)\n            targets = targets.view(B*T)\n            loss = F.cross_entropy(logits,targets)\n            \n        return logits, loss\n    \n    def generate(self, idx, max_new_tokens):\n        for _in range(max_new_tokens):\n            idx_cond = idx[:, - block_size:]\n            logits,loss = self(idx_cond)\n            logits = logits[:, -1, :]\n            probs = F.softmax(logits, dim = -1)\n            idx_next = torch.multinomial(probs, num_samples = 1)\n            idx = torch.cat((idx, idx_next), dim = 1)\n        return idx\n            \n        \n\n# %% [code]\nmodel = GPTLanguageModel()\nm = model.to(device)\nprint(sum(p.numel() for p in m.parameters())/1e6, 'M parameters')\noptimizer = torch.optim.AdamW(model.parameters(), lr = learning_rate)\nfor iter in range(max_iters):\n    if iter % eval_interval ==0 or iter == max_iters-1:\n        losses = estimate_loss()\n        print(f\"step {iter}: train loss {losses['train']:.4f}, val loss {losses['val']:.4f}\")\n    xb, yb = get_batch('train')\n    logits, loss = model(xb, yb)\n    optimizer.zero_grad(set_to_none = True)\n    loss.backward()\n    optimizer.step()\ncontext = torch.zeroes((1,1), dtype = torch.long, device = device)\nprint(decode(m.generate(context, max_new_tokens = 500)[0].tolist()))\n#open('new_script.txt', 'w').write(decode(m.generate(context, max_new_tokens=10000)[0].tolist()))\n\n# %% [code]\n\n\n# %% [code]\n","metadata":{"_uuid":"618719a4-1dd9-4e2f-807a-76feda2a8ed1","_cell_guid":"a4a7ff14-41e1-46b6-bca5-8abf506a314b","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}